/**
* The Jira Cloud platform REST API
* Jira Cloud platform REST API documentation
*
* The version of the OpenAPI document: 1001.0.0-SNAPSHOT
* Contact: ecosystem@atlassian.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.SimpleLink
import org.openapitools.client.models.VersionIssuesStatus

import com.squareup.moshi.Json
/**
 * Details about a project version.
 * @param expand Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  Optional for create and update.
 * @param self The URL of the version.
 * @param id The ID of the version.
 * @param description The description of the version. Optional when creating or updating a version.
 * @param name The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
 * @param archived Indicates that the version is archived. Optional when creating or updating a version.
 * @param released Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
 * @param startDate The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
 * @param releaseDate The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
 * @param overdue Indicates that the version is overdue.
 * @param userStartDate The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
 * @param userReleaseDate The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
 * @param project Deprecated. Use `projectId`.
 * @param projectId The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
 * @param moveUnfixedIssuesTo The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
 * @param operations If the expand option `operations` is used, returns the list of operations available for this version.
 * @param issuesStatusForFixVersion If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
 */

data class Version (
    /* Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  `operations` Returns the list of operations available for this version.  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  Optional for create and update. */
    @Json(name = "expand")
    val expand: kotlin.String? = null,
    /* The URL of the version. */
    @Json(name = "self")
    val self: java.net.URI? = null,
    /* The ID of the version. */
    @Json(name = "id")
    val id: kotlin.String? = null,
    /* The description of the version. Optional when creating or updating a version. */
    @Json(name = "description")
    val description: kotlin.String? = null,
    /* The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters. */
    @Json(name = "name")
    val name: kotlin.String? = null,
    /* Indicates that the version is archived. Optional when creating or updating a version. */
    @Json(name = "archived")
    val archived: kotlin.Boolean? = null,
    /* Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version. */
    @Json(name = "released")
    val released: kotlin.Boolean? = null,
    /* The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. */
    @Json(name = "startDate")
    val startDate: java.time.LocalDate? = null,
    /* The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. */
    @Json(name = "releaseDate")
    val releaseDate: java.time.LocalDate? = null,
    /* Indicates that the version is overdue. */
    @Json(name = "overdue")
    val overdue: kotlin.Boolean? = null,
    /* The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format. */
    @Json(name = "userStartDate")
    val userStartDate: kotlin.String? = null,
    /* The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format. */
    @Json(name = "userReleaseDate")
    val userReleaseDate: kotlin.String? = null,
    /* Deprecated. Use `projectId`. */
    @Json(name = "project")
    val project: kotlin.String? = null,
    /* The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version. */
    @Json(name = "projectId")
    val projectId: kotlin.Long? = null,
    /* The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version. */
    @Json(name = "moveUnfixedIssuesTo")
    val moveUnfixedIssuesTo: java.net.URI? = null,
    /* If the expand option `operations` is used, returns the list of operations available for this version. */
    @Json(name = "operations")
    val operations: kotlin.Array<SimpleLink>? = null,
    /* If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*. */
    @Json(name = "issuesStatusForFixVersion")
    val issuesStatusForFixVersion: VersionIssuesStatus? = null
) 



