/**
* The Jira Cloud platform REST API
* Jira Cloud platform REST API documentation
*
* The version of the OpenAPI document: 1001.0.0-SNAPSHOT
* Contact: ecosystem@atlassian.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.AvatarUrlsBean
import org.openapitools.client.models.Component
import org.openapitools.client.models.Hierarchy
import org.openapitools.client.models.IssueTypeDetails
import org.openapitools.client.models.ProjectCategory
import org.openapitools.client.models.ProjectInsight
import org.openapitools.client.models.ProjectPermissions
import org.openapitools.client.models.User
import org.openapitools.client.models.Version

import com.squareup.moshi.Json
/**
 * Details about a project.
 * @param expand Expand options that include additional project details in the response.
 * @param self The URL of the project details.
 * @param id The ID of the project.
 * @param key The key of the project.
 * @param description A brief description of the project.
 * @param lead The username of the project lead.
 * @param components List of the components contained in the project.
 * @param issueTypes List of the issue types available in the project.
 * @param url A link to information about this project, such as project documentation.
 * @param email An email address associated with the project.
 * @param assigneeType The default assignee when creating issues for this project.
 * @param versions The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
 * @param name The name of the project.
 * @param roles The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
 * @param avatarUrls The URLs of the project's avatars.
 * @param projectCategory The category the project belongs to.
 * @param projectTypeKey The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
 * @param simplified Whether the project is simplified.
 * @param style The type of the project.
 * @param favourite Whether the project is selected as a favorite.
 * @param isPrivate Whether the project is private.
 * @param issueTypeHierarchy The issue type hierarchy for the project
 * @param permissions User permissions on the project
 * @param properties Map of project properties
 * @param uuid Unique ID for next-gen projects.
 * @param insight Insights about the project.
 * @param deleted Whether the project is marked as deleted.
 * @param retentionTillDate The date when the project is deleted permanently.
 * @param deletedDate The date when the project was marked as deleted.
 * @param deletedBy The user who marked the project as deleted.
 * @param archived Whether the project is archived.
 * @param archivedDate The date when the project was archived.
 * @param archivedBy The user who archived the project.
 */

data class Project (
    /* Expand options that include additional project details in the response. */
    @Json(name = "expand")
    val expand: kotlin.String? = null,
    /* The URL of the project details. */
    @Json(name = "self")
    val self: java.net.URI? = null,
    /* The ID of the project. */
    @Json(name = "id")
    val id: kotlin.String? = null,
    /* The key of the project. */
    @Json(name = "key")
    val key: kotlin.String? = null,
    /* A brief description of the project. */
    @Json(name = "description")
    val description: kotlin.String? = null,
    /* The username of the project lead. */
    @Json(name = "lead")
    val lead: User? = null,
    /* List of the components contained in the project. */
    @Json(name = "components")
    val components: kotlin.Array<Component>? = null,
    /* List of the issue types available in the project. */
    @Json(name = "issueTypes")
    val issueTypes: kotlin.Array<IssueTypeDetails>? = null,
    /* A link to information about this project, such as project documentation. */
    @Json(name = "url")
    val url: kotlin.String? = null,
    /* An email address associated with the project. */
    @Json(name = "email")
    val email: kotlin.String? = null,
    /* The default assignee when creating issues for this project. */
    @Json(name = "assigneeType")
    val assigneeType: Project.AssigneeType? = null,
    /* The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post). */
    @Json(name = "versions")
    val versions: kotlin.Array<Version>? = null,
    /* The name of the project. */
    @Json(name = "name")
    val name: kotlin.String? = null,
    /* The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post). */
    @Json(name = "roles")
    val roles: kotlin.collections.Map<kotlin.String, java.net.URI>? = null,
    /* The URLs of the project's avatars. */
    @Json(name = "avatarUrls")
    val avatarUrls: AvatarUrlsBean? = null,
    /* The category the project belongs to. */
    @Json(name = "projectCategory")
    val projectCategory: ProjectCategory? = null,
    /* The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project. */
    @Json(name = "projectTypeKey")
    val projectTypeKey: Project.ProjectTypeKey? = null,
    /* Whether the project is simplified. */
    @Json(name = "simplified")
    val simplified: kotlin.Boolean? = null,
    /* The type of the project. */
    @Json(name = "style")
    val style: Project.Style? = null,
    /* Whether the project is selected as a favorite. */
    @Json(name = "favourite")
    val favourite: kotlin.Boolean? = null,
    /* Whether the project is private. */
    @Json(name = "isPrivate")
    val isPrivate: kotlin.Boolean? = null,
    /* The issue type hierarchy for the project */
    @Json(name = "issueTypeHierarchy")
    val issueTypeHierarchy: Hierarchy? = null,
    /* User permissions on the project */
    @Json(name = "permissions")
    val permissions: ProjectPermissions? = null,
    /* Map of project properties */
    @Json(name = "properties")
    val properties: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,
    /* Unique ID for next-gen projects. */
    @Json(name = "uuid")
    val uuid: java.util.UUID? = null,
    /* Insights about the project. */
    @Json(name = "insight")
    val insight: ProjectInsight? = null,
    /* Whether the project is marked as deleted. */
    @Json(name = "deleted")
    val deleted: kotlin.Boolean? = null,
    /* The date when the project is deleted permanently. */
    @Json(name = "retentionTillDate")
    val retentionTillDate: java.time.OffsetDateTime? = null,
    /* The date when the project was marked as deleted. */
    @Json(name = "deletedDate")
    val deletedDate: java.time.OffsetDateTime? = null,
    /* The user who marked the project as deleted. */
    @Json(name = "deletedBy")
    val deletedBy: User? = null,
    /* Whether the project is archived. */
    @Json(name = "archived")
    val archived: kotlin.Boolean? = null,
    /* The date when the project was archived. */
    @Json(name = "archivedDate")
    val archivedDate: java.time.OffsetDateTime? = null,
    /* The user who archived the project. */
    @Json(name = "archivedBy")
    val archivedBy: User? = null
) 


{
    /**
    * The default assignee when creating issues for this project.
    * Values: pROJECTLEAD,uNASSIGNED
    */
    
    enum class AssigneeType(val value: kotlin.String){
        @Json(name = "PROJECT_LEAD") pROJECTLEAD("PROJECT_LEAD"),
        @Json(name = "UNASSIGNED") uNASSIGNED("UNASSIGNED");
    }
    /**
    * The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    * Values: software,serviceDesk,business
    */
    
    enum class ProjectTypeKey(val value: kotlin.String){
        @Json(name = "software") software("software"),
        @Json(name = "service_desk") serviceDesk("service_desk"),
        @Json(name = "business") business("business");
    }
    /**
    * The type of the project.
    * Values: cLASSIC,nEXTGEN,classic,nextMinusGen
    */
    
    enum class Style(val value: kotlin.String){
        @Json(name = "CLASSIC") cLASSIC("CLASSIC"),
        @Json(name = "NEXTGEN") nEXTGEN("NEXTGEN"),
        @Json(name = "classic") classic("classic"),
        @Json(name = "next-gen") nextMinusGen("next-gen");
    }
}

