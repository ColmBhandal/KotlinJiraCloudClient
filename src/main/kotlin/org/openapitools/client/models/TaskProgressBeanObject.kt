/**
* The Jira Cloud platform REST API
* Jira Cloud platform REST API documentation
*
* The version of the OpenAPI document: 1001.0.0-SNAPSHOT
* Contact: ecosystem@atlassian.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models


import com.squareup.moshi.Json
/**
 * Details about a task.
 * @param self The URL of the task.
 * @param id The ID of the task.
 * @param status The status of the task.
 * @param submittedBy The ID of the user who submitted the task.
 * @param progress The progress of the task, as a percentage complete.
 * @param elapsedRuntime The execution time of the task, in milliseconds.
 * @param submitted A timestamp recording when the task was submitted.
 * @param lastUpdate A timestamp recording when the task progress was last updated.
 * @param description The description of the task.
 * @param message Information about the progress of the task.
 * @param result The result of the task execution.
 * @param started A timestamp recording when the task was started.
 * @param finished A timestamp recording when the task was finished.
 */

data class TaskProgressBeanObject (
    /* The URL of the task. */
    @Json(name = "self")
    val self: java.net.URI,
    /* The ID of the task. */
    @Json(name = "id")
    val id: kotlin.String,
    /* The status of the task. */
    @Json(name = "status")
    val status: TaskProgressBeanObject.Status,
    /* The ID of the user who submitted the task. */
    @Json(name = "submittedBy")
    val submittedBy: kotlin.Long,
    /* The progress of the task, as a percentage complete. */
    @Json(name = "progress")
    val progress: kotlin.Long,
    /* The execution time of the task, in milliseconds. */
    @Json(name = "elapsedRuntime")
    val elapsedRuntime: kotlin.Long,
    /* A timestamp recording when the task was submitted. */
    @Json(name = "submitted")
    val submitted: kotlin.Long,
    /* A timestamp recording when the task progress was last updated. */
    @Json(name = "lastUpdate")
    val lastUpdate: kotlin.Long,
    /* The description of the task. */
    @Json(name = "description")
    val description: kotlin.String? = null,
    /* Information about the progress of the task. */
    @Json(name = "message")
    val message: kotlin.String? = null,
    /* The result of the task execution. */
    @Json(name = "result")
    val result: kotlin.Any? = null,
    /* A timestamp recording when the task was started. */
    @Json(name = "started")
    val started: kotlin.Long? = null,
    /* A timestamp recording when the task was finished. */
    @Json(name = "finished")
    val finished: kotlin.Long? = null
) 


{
    /**
    * The status of the task.
    * Values: eNQUEUED,rUNNING,cOMPLETE,fAILED,cANCELREQUESTED,cANCELLED,dEAD
    */
    
    enum class Status(val value: kotlin.String){
        @Json(name = "ENQUEUED") eNQUEUED("ENQUEUED"),
        @Json(name = "RUNNING") rUNNING("RUNNING"),
        @Json(name = "COMPLETE") cOMPLETE("COMPLETE"),
        @Json(name = "FAILED") fAILED("FAILED"),
        @Json(name = "CANCEL_REQUESTED") cANCELREQUESTED("CANCEL_REQUESTED"),
        @Json(name = "CANCELLED") cANCELLED("CANCELLED"),
        @Json(name = "DEAD") dEAD("DEAD");
    }
}

