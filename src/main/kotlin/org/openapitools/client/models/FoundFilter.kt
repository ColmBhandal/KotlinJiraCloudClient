/**
* The Jira Cloud platform REST API
* Jira Cloud platform REST API documentation
*
* The version of the OpenAPI document: 1001.0.0-SNAPSHOT
* Contact: ecosystem@atlassian.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.FilterSubscription
import org.openapitools.client.models.SharePermission
import org.openapitools.client.models.User

import com.squareup.moshi.Json
/**
 * Details of a filter identified as part of a search.
 * @param name The name of the filter. Must be unique.
 * @param self The URL of the filter.
 * @param id The unique identifier for the filter.
 * @param description A description of the filter.
 * @param owner The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
 * @param jql The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
 * @param viewUrl A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
 * @param searchUrl A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
 * @param favourite Whether the filter is selected as a favorite by any users, not including the filter owner.
 * @param favouritedCount The count of how many users have selected this filter as a favorite, including the filter owner.
 * @param sharePermissions The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
 * @param subscriptions The users that are subscribed to the filter.
 */

data class FoundFilter (
    /* The name of the filter. Must be unique. */
    @Json(name = "name")
    val name: kotlin.String,
    /* The URL of the filter. */
    @Json(name = "self")
    val self: java.net.URI? = null,
    /* The unique identifier for the filter. */
    @Json(name = "id")
    val id: kotlin.String? = null,
    /* A description of the filter. */
    @Json(name = "description")
    val description: kotlin.String? = null,
    /* The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings. */
    @Json(name = "owner")
    val owner: User? = null,
    /* The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*. */
    @Json(name = "jql")
    val jql: kotlin.String? = null,
    /* A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*. */
    @Json(name = "viewUrl")
    val viewUrl: java.net.URI? = null,
    /* A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*. */
    @Json(name = "searchUrl")
    val searchUrl: java.net.URI? = null,
    /* Whether the filter is selected as a favorite by any users, not including the filter owner. */
    @Json(name = "favourite")
    val favourite: kotlin.Boolean? = null,
    /* The count of how many users have selected this filter as a favorite, including the filter owner. */
    @Json(name = "favouritedCount")
    val favouritedCount: kotlin.Long? = null,
    /* The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter. */
    @Json(name = "sharePermissions")
    val sharePermissions: kotlin.Array<SharePermission>? = null,
    /* The users that are subscribed to the filter. */
    @Json(name = "subscriptions")
    val subscriptions: kotlin.Array<FilterSubscription>? = null
) 



